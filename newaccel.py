import serial, array, select, sys, math, sqlite3, curses, struct
from datetime import datetime
from classifier import *

def startAccessPoint():
    return array.array('B', [0xFF, 0x07, 0x03]).tostring()

def accDataRequest():
    return array.array('B', [0xFF, 0x08, 0x07, 0x00, 0x00, 0x00, 0x00]).tostring()

def avg(values):
        return sum(values, 0.0) / len(values)

def startDB():
    conn = sqlite3.connect('testData.db')
    c = conn.cursor()
    c.execute('''create table if not exists acceldata (sessionID text, gestureID integer, xdata text, ydata text, zdata text)''')
    conn.commit()
    c.execute('''create table if not exists capData (gestureID integer, traceID integer, cap text)''')
    conn.commit()
    c.close()
    return conn

def is_number(s):
    try:
        int(s)
        return True
    except ValueError:
        return False

def main(screen):

    # initialise counters and such

    capturing = False
    realtime = False
    gestureID = 0
    capData = []
    r = Recognizer()

    PhoneList = "Double tap", "Shake", "Clockwise Circle", "Counterclockwise Circle", "Swing Left", "Swing Right"
    MediaList = "Double tap", "Swing Right", "Swing Left", "Shake", "Swing Forward", "Swing Backward"
    MapList = "Swing Left", "Swing Right", "Swing Forward", "Swing Backward", "Arc Left", "Arc Right"
    BrowserList = "Double tap toe forward", "Double tap left front", "Double tap right front"
    WholeList = ("Double tap", "Shake", "Clockwise Circle", "Counterclockwise Circle", "Swing Left", "Swing Right",
                "Swing Forward", "Swing Backward", "Arc Left", "Arc Right", "Double tap toe forward",
                "Double tap left front", "Double tap right front")
    ShortList = "Double tap", "Shake"
    CustomList = "Double tap", "Swing Left", "Swing Right", "Swing Forward", "Swing Back"
    ShorterList = "Swing Forward", "Swing Back", "Swing Left"
    PresentationList = "Swing Forward", "Swing Backward"

    gestureList = PresentationList
    gestureName = gestureList[0]
    traces = 5
    traceID = 0
    classifying = False
    testing = False

    score = 0.0
    total = 0.0
    badClass = []
    buffer = []

    blank = [[0,0,0,0],[0,5,5,5],[0,0,0,0]]
    r.addTemplate("blank",blank)

    def cprint(message,x,y):
        screen.addstr(y,0," "*79)
        screen.addstr(y,x,message)
        screen.refresh()
        
    rightnow = datetime.now()

    ser = serial.Serial('/dev/ttyACM0',115200,timeout=1)

    # start access point
    ser.write(startAccessPoint())

    screen.nodelay(1)

    cprint("Welcome to the gesture capture app.",5,0)
    cprint("SessionID: " + str(rightnow),5,1)
    cprint("Keys: G - Set Next GestureID | N - Set next GestureName | C - Toggle Classify Mode",5,11)
    cprint("      B - Begin Capture | S - Stop Capture | Q - Quit",5,12)
    cprint("Waiting for accelerometer data.", 15,5)
    cprint("Realtime: " + str(realtime) + " Classifying: " + str(classifying) + " Testing: " + str(testing),5,2)

    # set up sqlite3 database
    conn = startDB()

    # set up training data
    trainData =  [[[0, -2, -54, -41], [0, -4, -54, -42], [0, -4, -55, -42], [0, -3, -55, -41], [0, -3, -55, -41], [0, -5, -55, -40], [0, -3, -55, -40], [0, -2, -55, -40], [0, -2, -55, -39], [0, -3, -55, -37], [0, -4, -57, -37], [0, -3, -58, -36], [0, -2, -56, -38], [0, -3, -59, -39], [0, -3, -60, -38], [0, -4, -58, -38], [0, 5, -66, -42], [0, 11, -76, -40], [0, 53, -82, -36], [0, 102, -98, -31], [0, 84, -96, -15], [0, 64, -103, -16], [0, 56, -98, -15], [0, 41, -96, -13], [0, 34, -93, -11], [0, 31, -86, -12], [0, 26, -80, -17], [0, 26, -66, -18], [0, 25, -65, -15], [0, 20, -46, -15], [0, 10, -43, -15], [0, 4, -30, -15], [0, 17, -29, -15], [0, 34, -34, -14], [0, 33, -35, -10], [0, 30, -32, -11], [0, 25, -23, -15], [0, 21, -14, -19], [0, 12, -8, -21], [0, 6, -5, -19], [0, -1, -1, -17], [0, -7, 5, -16], [0, -6, 10, -15], [0, -6, 15, -14], [0, -3, 23, -19], [0, 2, 17, -12], [0, -1, 7, 5], [0, 2, 6, 14], [0, 7, 3, -2], [0, 16, -1, -8], [0, 18, -8, -9], [0, 9, -16, -7], [0, 7, -17, -6], [0, 10, -23, -8], [0, 15, -34, -10], [0, 16, -45, -17], [0, 12, -55, -18], [0, 12, -56, -25], [0, 23, -53, -28], [0, 15, -65, -20], [0, 8, -91, -8], [0, 10, -106, -9], [0, 18, -107, -24], [0, 35, -109, -45], [0, 43, -106, -40], [0, 56, -126, -31], [0, 69, -116, -33]]
                ,[[0, -4, -55, -39], [0, -4, -55, -39], [0, -3, -56, -38], [0, -3, -56, -39], [0, -4, -55, -41], [0, -5, -56, -43], [0, -3, -55, -42], [0, -5, -55, -42], [0, -5, -56, -39], [0, -6, -57, -39], [0, -4, -57, -39], [0, -4, -56, -39], [0, -3, -56, -37], [0, -3, -57, -36], [0, -5, -58, -36], [0, -2, -59, -36], [0, -3, -62, -38], [0, -2, -62, -34], [0, -3, -65, -33], [0, 6, -70, -25], [0, 18, -73, -25], [0, 45, -70, -39], [0, 109, -102, -30], [0, 89, -103, -25], [0, 69, -111, -24], [0, 50, -94, -28], [0, 41, -88, -28], [0, 37, -81, -19], [0, 40, -77, -13], [0, 35, -72, -9], [0, 44, -68, -7], [0, 44, -61, -8], [0, 45, -46, -11], [0, 43, -45, -10], [0, 42, -42, -12], [0, 44, -38, -12], [0, 40, -40, -15], [0, 27, -34, -15], [0, 8, -34, -15], [0, -8, -29, -20], [0, -16, -19, -29], [0, -23, -10, -37], [0, -30, -2, -39], [0, -37, 4, -37], [0, -40, 5, -28], [0, -35, 3, -20], [0, -24, -2, -11], [0, -12, -4, -10], [0, 9, -8, -13], [0, 17, -15, -11], [0, 18, -18, -10], [0, 17, -29, -10], [0, 17, -36, -10], [0, 8, -40, -9], [0, -5, -53, 1], [0, -9, -60, -12], [0, 6, -63, -38], [0, 19, -77, -41], [0, 22, -89, -19], [0, 16, -105, -11], [0, 38, -117, -19], [0, 76, -124, -37], [0, 106, -120, -45], [0, 121, -117, -38], [0, 110, -97, -28], [0, 85, -77, -25], [0, 62, -63, -31], [0, 42, -54, -31], [0, 61, -49, -36], [0, 60, -63, -4]]
                ,[[0, -1, -57, -32], [0, 1, -57, -33], [0, 2, -60, -34], [0, 2, -61, -35], [0, 2, -63, -31], [0, -1, -63, -32], [0, 4, -72, -33], [0, 11, -75, -31], [0, 31, -76, -35], [0, 86, -87, -34], [0, 110, -112, -20], [0, 92, -105, -24], [0, 83, -95, -26], [0, 65, -94, -20], [0, 60, -99, -12], [0, 56, -101, -11], [0, 61, -92, -13], [0, 55, -79, -14], [0, 32, -68, -19], [0, 29, -52, -24], [0, 23, -51, -20], [0, 9, -54, -15], [0, -9, -44, -17], [0, -32, -32, -15], [0, -60, -21, -26], [0, -77, -6, -32], [0, -80, 14, -38], [0, -81, 22, -40], [0, -80, 14, -33], [0, -71, 8, -22], [0, -42, -4, -25], [0, -23, -23, -24], [0, -20, -37, -22], [0, -19, -49, -19], [0, -10, -64, -31], [0, 12, -71, -30], [0, 15, -99, -18], [0, 15, -104, -21], [0, 15, -122, -14], [0, 48, -128, -33], [0, 102, -128, -46], [0, 125, -128, -51], [0, 121, -118, -49], [0, 100, -91, -47], [0, 127, -75, -49], [0, 98, -81, -9], [0, -85, -48, -37]]
                ,[[0, -3, -55, -39], [0, -3, -55, -41], [0, -3, -55, -40], [0, -2, -55, -39], [0, -3, -55, -39], [0, -2, -57, -38], [0, -2, -56, -38], [0, -1, -55, -39], [0, -1, -55, -38], [0, 1, -57, -34], [0, -2, -58, -37], [0, 1, -58, -31], [0, 2, -58, -34], [0, 8, -61, -36], [0, 12, -64, -37], [0, 20, -66, -40], [0, 75, -72, -46], [0, 87, -82, -33], [0, 72, -86, -31], [0, 69, -95, -27], [0, 60, -93, -25], [0, 54, -90, -22], [0, 50, -92, -19], [0, 50, -86, -19], [0, 50, -79, -18], [0, 44, -81, -13], [0, 46, -64, -11], [0, 39, -73, -8], [0, 35, -64, -8], [0, 35, -56, -10], [0, 34, -66, -10], [0, 25, -62, -11], [0, 15, -48, -13], [0, 7, -39, -15], [0, -8, -30, -20], [0, -25, -20, -28], [0, -41, -9, -31], [0, -52, -2, -29], [0, -54, 5, -27], [0, -48, 13, -30], [0, -41, 11, -26], [0, -39, 8, -25], [0, -35, 1, -23], [0, -22, -12, -18], [0, -16, -22, -21], [0, -12, -33, -21], [0, -7, -47, -17], [0, -8, -56, -24], [0, -5, -74, -23], [0, 2, -92, -26], [0, 5, -95, -35], [0, 5, -115, -25], [0, 13, -128, -11], [0, 26, -128, -23], [0, 69, -128, -64], [0, 127, -128, -69], [0, 127, -127, -44], [0, 121, -79, -46], [0, 90, -65, -63], [0, 65, -64, -48], [0, 33, -49, -17]]
                ,[[0, -2, -55, -40], [0, -2, -55, -39], [0, -1, -55, -38], [0, -1, -55, -38], [0, -1, -55, -40], [0, -2, -54, -42], [0, -3, -54, -42], [0, -6, -55, -43], [0, -3, -55, -43], [0, -2, -57, -38], [0, -2, -56, -39], [0, -2, -57, -41], [0, -2, -55, -38], [0, 1, -57, -35], [0, 1, -57, -35], [0, 3, -56, -33], [0, 5, -59, -29], [0, 5, -59, -30], [0, 5, -62, -34], [0, 5, -59, -29], [0, 3, -58, -27], [0, 6, -60, -25], [0, 15, -62, -26], [0, 26, -61, -31], [0, 96, -63, -34], [0, 100, -83, -26], [0, 76, -81, -27], [0, 63, -92, -24], [0, 50, -100, -23], [0, 53, -98, -27], [0, 54, -96, -33], [0, 49, -90, -35], [0, 47, -83, -32], [0, 43, -82, -25], [0, 35, -76, -21], [0, 23, -75, -18], [0, 22, -65, -16], [0, 16, -57, -17], [0, 12, -39, -16], [0, 6, -25, -14], [0, -3, -9, -12], [0, -2, -2, -8], [0, 21, -8, 8], [0, 31, -14, 14], [0, 42, -19, 14], [0, 48, -20, 11], [0, 53, -15, 9], [0, 46, -17, 1], [0, 28, -17, -10], [0, 7, -12, -17], [0, -3, -12, -21], [0, -7, -11, -28], [0, -14, -10, -31], [0, -15, -10, -30], [0, -12, -12, -27], [0, -9, -15, -25], [0, -3, -19, -19], [0, 1, -24, -17], [0, 9, -29, -16], [0, 7, -36, -17], [0, 12, -39, -14], [0, 12, -51, -5], [0, 3, -58, -6], [0, 7, -63, -7], [0, 5, -60, -17], [0, -7, -65, -16], [0, -8, -85, -7], [0, 5, -106, -6], [0, 37, -128, -5], [0, 85, -128, -13], [0, 121, -128, -19], [0, 120, -128, -34], [0, 113, -101, -45], [0, 105, -77, -57], [0, 93, -51, -61], [0, 84, -43, -39], [0, 123, -63, -20], [0, -22, -72, -38], [0, -24, -58, -52], [0, -2, -93, -7]]

                ,[[0, 1, -55, -38], [0, -1, -55, -38], [0, 1, -57, -40], [0, 1, -55, -38], [0, 1, -54, -38], [0, 1, -56, -38], [0, 1, -54, -41], [0, 2, -53, -41], [0, 1, -55, -40], [0, -1, -56, -40], [0, -1, -55, -39], [0, 1, -55, -38], [0, 1, -57, -39], [0, 1, -57, -38], [0, 1, -59, -39], [0, -1, -60, -40], [0, -4, -66, -46], [0, -5, -67, -45], [0, -4, -70, -44], [0, -2, -77, -41], [0, -5, -84, -40], [0, -12, -80, -43], [0, -11, -71, -54], [0, -21, -55, -62], [0, -78, -38, -63], [0, -70, -43, -60], [0, -66, -57, -57], [0, -61, -74, -47], [0, -48, -86, -40], [0, -31, -92, -39], [0, -24, -96, -36], [0, -16, -96, -38], [0, -9, -93, -41], [0, -4, -91, -43], [0, 3, -88, -46], [0, 8, -84, -49], [0, 12, -80, -44], [0, 10, -73, -40], [0, 13, -73, -45], [0, 19, -63, -47], [0, 16, -46, -47], [0, -2, -42, -44], [0, -23, -38, -37], [0, -30, -38, -31], [0, -40, -39, -31], [0, -33, -42, -34], [0, -36, -40, -33], [0, -38, -35, -29], [0, -35, -35, -27], [0, -28, -31, -25], [0, -22, -37, -30], [0, -18, -30, -29], [0, -14, -32, -28], [0, -15, -27, -22], [0, -7, -25, -24], [0, 2, -28, -25], [0, 12, -35, -25], [0, 17, -36, -20], [0, 19, -38, -17], [0, 15, -48, -19], [0, 22, -59, -28], [0, 25, -68, -34], [0, 21, -73, -34], [0, 16, -82, -36], [0, 10, -94, -40], [0, 7, -98, -45], [0, -3, -103, -49], [0, -9, -104, -50], [0, -14, -100, -51], [0, -18, -95, -51], [0, -26, -90, -48], [0, -35, -87, -44], [0, -41, -79, -41], [0, -44, -66, -43], [0, -48, -48, -46], [0, -50, -44, -45], [0, -47, -49, -40], [0, -49, -65, -39], [0, -46, -63, -34], [0, -17, -61, -44], [0, 41, -72, -52], [0, 58, -100, -25], [0, -45, -65, -28], [0, 9, -79, -46], [0, 6, -73, -49], [0, 6, -61, -49], [0, 12, -64, -33]]
                ,[[0, 4, -55, -39], [0, 2, -55, -40], [0, 2, -54, -39], [0, 1, -56, -40], [0, 1, -55, -41], [0, 1, -55, -42], [0, -1, -56, -42], [0, -1, -56, -42], [0, -1, -56, -40], [0, -1, -56, -41], [0, 2, -62, -42], [0, 2, -65, -43], [0, 2, -72, -43], [0, -1, -82, -49], [0, -4, -98, -43], [0, -22, -89, -48], [0, -12, -80, -53], [0, 6, -61, -59], [0, -69, -46, -61], [0, -83, -34, -69], [0, -61, -40, -70], [0, -75, -56, -69], [0, -64, -88, -59], [0, -54, -97, -56], [0, -51, -106, -52], [0, -36, -112, -51], [0, -20, -120, -52], [0, -9, -123, -53], [0, 6, -128, -50], [0, 21, -119, -43], [0, 31, -98, -42], [0, 35, -85, -37], [0, 40, -72, -37], [0, 52, -57, -35], [0, 42, -48, -28], [0, 27, -41, -19], [0, 23, -38, -15], [0, 28, -37, -14], [0, 32, -36, -15], [0, 33, -35, -18], [0, 35, -32, -22], [0, 34, -32, -23], [0, 27, -42, -19], [0, 23, -53, -18], [0, 22, -65, -20], [0, 3, -76, -28], [0, -16, -72, -30], [0, -12, -75, -39], [0, -1, -88, -43], [0, -6, -101, -41], [0, -9, -98, -47], [0, -12, -93, -54], [0, -9, -91, -58], [0, -10, -89, -59], [0, -17, -84, -56], [0, -27, -83, -50], [0, -35, -74, -51], [0, -36, -62, -55], [0, -40, -59, -55]]
                ,[[0, -1, -55, -42], [0, -1, -55, -41], [0, -2, -55, -40], [0, -3, -56, -41], [0, -3, -55, -41], [0, -1, -56, -41], [0, -2, -55, -42], [0, -3, -57, -40], [0, -3, -58, -40], [0, -5, -62, -44], [0, -5, -64, -49], [0, -6, -61, -44], [0, -11, -69, -46], [0, -14, -76, -52], [0, -3, -74, -52], [0, -49, -48, -50], [0, -87, -32, -55], [0, -77, -41, -62], [0, -51, -63, -60], [0, -50, -76, -52], [0, -43, -85, -52], [0, -34, -91, -53], [0, -23, -90, -52], [0, -19, -90, -52], [0, -19, -93, -50], [0, -13, -97, -48], [0, 3, -95, -50], [0, 11, -82, -50], [0, 11, -75, -44], [0, 16, -67, -38], [0, 25, -57, -35], [0, 18, -51, -28], [0, 20, -50, -17], [0, 31, -47, -17], [0, 34, -45, -12], [0, 31, -44, -11], [0, 28, -47, -23], [0, 26, -54, -31], [0, 24, -59, -36], [0, 21, -67, -40], [0, 15, -73, -44], [0, 9, -79, -44], [0, 1, -84, -45], [0, -6, -87, -45], [0, -10, -88, -45], [0, -13, -84, -46], [0, -14, -80, -47], [0, -18, -76, -46], [0, -22, -74, -41], [0, -36, -66, -38], [0, -45, -56, -38], [0, -50, -45, -41], [0, -45, -41, -43], [0, -38, -41, -44]]
                ,[[0, -2, -56, -42], [0, -1, -55, -42], [0, -2, -56, -42], [0, -2, -55, -40], [0, -3, -57, -39], [0, -1, -58, -41], [0, 3, -65, -40], [0, 3, -67, -42], [0, 3, -79, -44], [0, -3, -94, -43], [0, -13, -96, -45], [0, -9, -83, -50], [0, -6, -68, -51], [0, 4, -47, -56], [0, -49, -35, -57], [0, -39, -40, -56], [0, -57, -47, -57], [0, -59, -63, -61], [0, -40, -67, -54], [0, -42, -73, -52], [0, -45, -89, -44], [0, -37, -92, -46], [0, -32, -101, -48], [0, -14, -108, -48], [0, -7, -105, -52], [0, -2, -108, -51], [0, 3, -105, -47], [0, 11, -95, -46], [0, 19, -84, -44], [0, 29, -63, -45], [0, 28, -52, -39], [0, 26, -48, -30], [0, 19, -44, -24], [0, 21, -40, -21], [0, 26, -36, -23], [0, 25, -34, -25], [0, 21, -32, -22], [0, 22, -33, -23], [0, 22, -35, -25], [0, 22, -40, -26], [0, 17, -45, -27], [0, 15, -51, -30], [0, 13, -59, -32], [0, 12, -67, -35], [0, 15, -72, -38], [0, 18, -81, -42], [0, 10, -89, -43], [0, 7, -93, -43], [0, 2, -95, -45], [0, -5, -98, -42], [0, -16, -93, -39], [0, -25, -88, -38], [0, -35, -72, -36], [0, -40, -61, -35], [0, -47, -57, -39], [0, -53, -47, -41], [0, -49, -45, -43], [0, -44, -41, -46], [0, -33, -38, -51], [0, -56, -59, -68]]
                ,[[0, -2, -54, -43], [0, -1, -54, -44], [0, -2, -54, -44], [0, -3, -54, -45], [0, -6, -54, -44], [0, -6, -56, -46], [0, -3, -56, -49], [0, -4, -56, -50], [0, -7, -59, -50], [0, -9, -64, -47], [0, -5, -80, -48], [0, 2, -92, -48], [0, -1, -100, -46], [0, -15, -94, -48], [0, -17, -88, -47], [0, -6, -58, -55], [0, 19, -34, -57], [0, -38, -45, -56], [0, -42, -51, -52], [0, -40, -54, -67], [0, -37, -65, -60], [0, -37, -65, -54], [0, -39, -70, -41], [0, -36, -81, -40], [0, -30, -84, -40], [0, -22, -95, -41], [0, -7, -101, -44], [0, 4, -100, -46], [0, 5, -97, -45], [0, 2, -92, -45], [0, 9, -91, -44], [0, 17, -78, -45], [0, 17, -64, -45], [0, 10, -56, -44], [0, -6, -43, -38], [0, -17, -49, -33], [0, -21, -45, -30], [0, -24, -35, -35], [0, -13, -30, -39], [0, -10, -39, -36], [0, -13, -37, -30], [0, -16, -32, -31], [0, -17, -23, -36], [0, -21, -22, -35], [0, -26, -23, -30], [0, -28, -27, -27], [0, -30, -27, -29], [0, -29, -23, -32], [0, -31, -24, -34], [0, -29, -22, -32], [0, -24, -25, -34], [0, -17, -29, -37], [0, -7, -42, -43], [0, -4, -40, -34], [0, -15, -37, -33], [0, -30, -36, -30], [0, -30, -37, -31], [0, -22, -46, -37], [0, -8, -61, -39], [0, -1, -68, -38], [0, -7, -71, -37], [0, -10, -77, -39], [0, -12, -83, -43], [0, -12, -82, -44], [0, -15, -77, -44], [0, -17, -85, -46], [0, -17, -81, -50], [0, -17, -85, -48], [0, -17, -78, -46], [0, -23, -73, -45], [0, -24, -67, -44], [0, -24, -65, -44], [0, -28, -65, -42], [0, -31, -61, -40], [0, -32, -61, -39], [0, -30, -54, -43], [0, -28, -48, -41], [0, -28, -53, -41], [0, -22, -58, -42], [0, -15, -60, -45], [0, -31, -59, -51], [0, -5, -71, -45], [0, 28, -77, -52]]
                
                ,[[0, -11, -52, -49], [0, -11, -52, -48], [0, -12, -52, -48], [0, -11, -52, -49], [0, -11, -52, -49], [0, -12, -52, -48], [0, -10, -52, -48], [0, -11, -51, -48], [0, -11, -52, -47], [0, -12, -52, -48], [0, -11, -53, -49], [0, -12, -51, -48], [0, -12, -52, -47], [0, -11, -52, -48], [0, -12, -53, -49], [0, -9, -52, -48], [0, -12, -52, -49], [0, -12, -52, -48], [0, -11, -51, -47], [0, -11, -52, -48], [0, -9, -52, -50], [0, -12, -51, -47], [0, -11, -52, -48], [0, -11, -54, -48], [0, -11, -49, -49], [0, -11, -52, -48], [0, -9, -52, -48], [0, -11, -52, -48], [0, -11, -52, -49], [0, -11, -51, -48], [0, -11, -53, -48], [0, -11, -52, -49], [0, -11, -52, -49], [0, -11, -53, -48], [0, -11, -52, -47], [0, -11, -52, -49], [0, -10, -52, -49], [0, -11, -52, -48], [0, -11, -52, -48], [0, -11, -52, -48], [0, -11, -53, -48], [0, -11, -52, -48], [0, -11, -52, -48], [0, -11, -52, -48], [0, -11, -52, -48], [0, -11, -53, -48], [0, -12, -53, -48], [0, -11, -52, -48], [0, -10, -52, -48], [0, -11, -52, -48], [0, -12, -52, -48], [0, -11, -53, -48], [0, -11, -52, -48], [0, -11, -52, -50], [0, -11, -53, -48], [0, -11, -52, -51], [0, -11, -52, -48], [0, -10, -51, -49], [0, -11, -52, -47], [0, -11, -53, -49], [0, -11, -52, -48], [0, -11, -53, -48], [0, -12, -49, -47], [0, -11, -53, -48], [0, -11, -52, -48], [0, -12, -52, -49], [0, -12, -52, -48], [0, -12, -52, -47], [0, -12, -52, -48], [0, -11, -52, -48], [0, -12, -52, -48], [0, -11, -52, -49], [0, -11, -51, -48], [0, -11, -53, -48], [0, -10, -52, -49], [0, -11, -52, -48], [0, -10, -53, -48], [0, -11, -52, -48], [0, -11, -51, -49], [0, -11, -52, -49], [0, -10, -52, -48], [0, -11, -52, -49], [0, -11, -52, -48], [0, -11, -52, -49], [0, -11, -52, -48], [0, -10, -52, -48], [0, -11, -53, -48], [0, -12, -51, -48], [0, -10, -52, -48], [0, -10, -53, -49], [0, -11, -52, -49], [0, -10, -51, -48], [0, -11, -52, -49], [0, -11, -52, -48], [0, -11, -52, -48], [0, -10, -52, -48], [0, -11, -52, -48]]
                ,[[0, 3, -56, -37], [0, 4, -55, -38], [0, 3, -56, -37], [0, 3, -55, -38], [0, 3, -55, -38], [0, 4, -55, -38], [0, 3, -55, -37], [0, 3, -55, -38], [0, 3, -55, -38], [0, 2, -55, -37], [0, 2, -56, -38], [0, 2, -52, -38], [0, 3, -55, -38], [0, 3, -55, -38], [0, 4, -55, -38], [0, 4, -55, -38], [0, 3, -55, -38], [0, 3, -56, -38], [0, 3, -56, -37], [0, 4, -55, -37], [0, 3, -55, -37], [0, 3, -56, -37], [0, 3, -55, -38], [0, 3, -56, -38], [0, 2, -56, -38], [0, 4, -55, -38], [0, 3, -55, -38], [0, 4, -55, -37], [0, 4, -55, -38], [0, 3, -55, -38], [0, 3, -56, -38], [0, 3, -55, -38], [0, 4, -56, -39], [0, 3, -56, -38], [0, 3, -55, -37], [0, 3, -55, -37], [0, 3, -56, -37], [0, 3, -55, -38], [0, 3, -55, -38], [0, 3, -55, -38], [0, 3, -55, -38], [0, 3, -55, -38], [0, 3, -55, -38], [0, 3, -55, -38], [0, 3, -55, -38], [0, 3, -55, -38], [0, 3, -56, -37], [0, 3, -55, -37], [0, 3, -55, -38], [0, 3, -55, -37], [0, 3, -56, -38], [0, 3, -57, -37], [0, 2, -56, -38], [0, 2, -55, -38], [0, 2, -54, -38], [0, 3, -55, -38], [0, 3, -56, -37], [0, 3, -55, -38], [0, 3, -54, -37], [0, 3, -55, -39], [0, 3, -55, -38], [0, 3, -56, -37], [0, 3, -55, -37], [0, 3, -55, -38], [0, 3, -56, -38], [0, 3, -56, -37], [0, 3, -55, -37], [0, 3, -55, -37], [0, 3, -55, -38], [0, 3, -55, -38], [0, 3, -56, -38], [0, 3, -56, -38], [0, 4, -56, -38], [0, 3, -55, -37], [0, 2, -55, -38], [0, 2, -55, -38], [0, 2, -55, -38], [0, 2, -55, -37], [0, 3, -55, -38], [0, 3, -55, -38], [0, 3, -55, -37], [0, 3, -55, -37], [0, 3, -55, -37], [0, 3, -56, -37], [0, 3, -56, -38], [0, 3, -55, -38], [0, 3, -55, -38], [0, 2, -55, -37], [0, 3, -55, -37], [0, 3, -57, -38], [0, 3, -56, -39]]
                ,[[0, -7, -55, -42], [0, -6, -55, -42], [0, -6, -55, -41], [0, -6, -55, -42], [0, -6, -55, -41], [0, -6, -55, -42], [0, -6, -55, -41], [0, -6, -55, -42], [0, -6, -54, -41], [0, -6, -55, -42], [0, -6, -55, -41], [0, -6, -55, -41], [0, -6, -55, -42], [0, -6, -55, -42], [0, -6, -54, -41], [0, -6, -55, -41], [0, -6, -56, -41], [0, -7, -55, -42], [0, -7, -56, -41], [0, -6, -55, -41], [0, -6, -55, -42], [0, -6, -55, -42], [0, -6, -54, -42], [0, -6, -54, -41], [0, -6, -54, -41], [0, -6, -55, -41], [0, -6, -54, -42], [0, -6, -55, -42], [0, -5, -54, -42], [0, -6, -54, -41], [0, -7, -56, -42], [0, -6, -54, -42], [0, -5, -55, -41], [0, -6, -54, -41], [0, -5, -55, -41], [0, -5, -55, -41], [0, -6, -55, -41], [0, -6, -55, -42], [0, -6, -55, -41], [0, -7, -54, -41], [0, -7, -54, -40], [0, -7, -54, -41], [0, -6, -55, -42], [0, -4, -54, -41], [0, -5, -56, -42], [0, -6, -54, -42], [0, -7, -55, -42], [0, -6, -54, -43], [0, -4, -56, -42], [0, -6, -55, -41], [0, -5, -55, -42], [0, -6, -55, -42], [0, -6, -54, -42], [0, -4, -55, -42], [0, -6, -54, -41], [0, -6, -55, -42], [0, -6, -55, -42], [0, -6, -54, -42], [0, -6, -54, -42], [0, -5, -55, -42], [0, -6, -54, -42], [0, -5, -54, -41], [0, -6, -55, -42], [0, -5, -54, -42], [0, -5, -55, -41], [0, -7, -56, -42], [0, -5, -54, -41], [0, -6, -56, -42], [0, -7, -55, -42], [0, -5, -51, -42], [0, -5, -56, -42], [0, -5, -54, -41], [0, -6, -55, -42], [0, -4, -55, -41], [0, -5, -54, -41], [0, -6, -55, -42], [0, -6, -55, -42], [0, -6, -55, -42], [0, -6, -54, -42], [0, -6, -55, -42], [0, -6, -54, -42], [0, -6, -55, -42], [0, -6, -54, -42], [0, -6, -55, -42], [0, -5, -54, -42], [0, -6, -55, -43], [0, -6, -55, -42], [0, -6, -55, -42], [0, -6, -54, -42], [0, -6, -55, -42], [0, -6, -55, -42], [0, -5, -55, -42], [0, -6, -54, -42], [0, -6, -55, -42], [0, -5, -55, -42], [0, -5, -54, -42], [0, -6, -54, -42], [0, -6, -55, -42], [0, -6, -55, -43], [0, -5, -54, -42], [0, -6, -54, -41], [0, -5, -54, -41], [0, -6, -54, -42], [0, -5, -55, -43]]
                ,[[0, 1, -54, -38], [0, 1, -55, -38], [0, 3, -55, -38], [0, 1, -55, -37], [0, 2, -55, -38], [0, 2, -55, -37], [0, 1, -56, -37], [0, 2, -55, -38], [0, 1, -55, -37], [0, 2, -56, -38], [0, 2, -55, -37], [0, 2, -55, -37], [0, 1, -56, -38], [0, 2, -56, -36], [0, 1, -55, -37], [0, 2, -56, -37], [0, 1, -55, -38], [0, 1, -56, -38], [0, 1, -56, -38], [0, 2, -57, -38], [0, 1, -56, -37], [0, 1, -56, -38], [0, 2, -55, -37], [0, 1, -57, -37], [0, 1, -51, -38], [0, 1, -55, -38], [0, 3, -56, -38], [0, 1, -56, -37], [0, 2, -56, -37], [0, 1, -57, -37], [0, 2, -55, -38], [0, 1, -55, -38], [0, 2, -56, -38], [0, 2, -56, -37], [0, 2, -55, -37], [0, 1, -56, -38], [0, 1, -56, -38], [0, 1, -55, -37], [0, 1, -55, -38], [0, 1, -55, -38], [0, 1, -56, -37], [0, 2, -55, -38], [0, 1, -55, -37], [0, 1, -56, -37], [0, 1, -55, -38], [0, 1, -55, -38], [0, 1, -55, -38], [0, 1, -56, -37], [0, 1, -56, -37], [0, 1, -56, -38], [0, 2, -56, -38], [0, 1, -56, -38], [0, 2, -56, -38], [0, 1, -56, -38], [0, 1, -55, -37], [0, 1, -56, -37], [0, 1, -55, -37], [0, 1, -55, -38], [0, 1, -55, -38], [0, 2, -56, -39], [0, 1, -55, -38], [0, 1, -55, -37], [0, 3, -56, -37], [0, 4, -56, -35], [0, 2, -53, -37], [0, 3, -56, -37], [0, 1, -56, -37], [0, 1, -55, -38], [0, 1, -56, -38], [0, 1, -55, -37], [0, 3, -56, -38], [0, 2, -55, -38], [0, 1, -56, -37], [0, 1, -55, -38], [0, 1, -56, -37], [0, 2, -56, -38], [0, 1, -55, -38], [0, 2, -56, -38], [0, 2, -56, -38], [0, 2, -55, -37], [0, 1, -56, -38], [0, 1, -54, -37], [0, 1, -56, -37], [0, 2, -55, -38], [0, 1, -56, -37], [0, 1, -55, -37], [0, 1, -55, -37], [0, 2, -55, -37], [0, 2, -55, -37], [0, 1, -56, -37], [0, 1, -56, -38], [0, 1, -55, -38], [0, 2, -56, -38]]
                ,[[0, 1, -56, -37], [0, 1, -56, -37], [0, 1, -56, -37], [0, 1, -55, -38], [0, 1, -55, -37], [0, 1, -56, -37], [0, 1, -55, -37], [0, 2, -55, -38], [0, 1, -55, -37], [0, 1, -56, -36], [0, 1, -57, -38], [0, 2, -56, -40], [0, 3, -55, -37], [0, 1, -55, -37], [0, 1, -55, -37], [0, 2, -55, -38], [0, 2, -55, -38], [0, 1, -55, -37], [0, 4, -56, -37], [0, 1, -57, -37], [0, 2, -55, -35], [0, 2, -55, -38], [0, 1, -56, -38], [0, 1, -56, -37], [0, 2, -56, -37], [0, 2, -56, -38], [0, 1, -55, -37], [0, 1, -55, -37], [0, 1, -55, -38], [0, 1, -55, -37], [0, 1, -55, -37], [0, 2, -56, -37], [0, 1, -56, -37], [0, 2, -56, -37], [0, 1, -55, -38], [0, 1, -56, -37], [0, 1, -57, -37], [0, 2, -55, -37], [0, 2, -55, -37], [0, 2, -55, -37], [0, 2, -56, -37], [0, 1, -56, -38], [0, 1, -56, -37], [0, 1, -55, -37], [0, 2, -55, -37], [0, 1, -56, -37], [0, 2, -56, -38], [0, 1, -56, -37], [0, 1, -55, -38], [0, 1, -55, -37], [0, 1, -56, -38], [0, 1, -55, -38], [0, 2, -57, -38], [0, 1, -52, -38], [0, 1, -55, -36], [0, 2, -56, -37], [0, 1, -55, -37], [0, 2, -56, -38], [0, 2, -56, -38], [0, 3, -55, -37], [0, 1, -55, -38], [0, 1, -56, -38], [0, 1, -55, -37], [0, 2, -56, -37], [0, 2, -56, -37], [0, 1, -56, -38], [0, 2, -55, -38], [0, 1, -55, -38], [0, 2, -56, -37], [0, 2, -56, -38], [0, 1, -55, -37], [0, 1, -55, -37], [0, 1, -55, -37], [0, 2, -56, -38], [0, 1, -56, -37], [0, 1, -55, -37], [0, 1, -56, -37], [0, 1, -55, -38], [0, 2, -56, -37], [0, 1, -56, -38], [0, 1, -56, -37], [0, 1, -55, -38], [0, 2, -55, -37], [0, 1, -55, -37], [0, 2, -54, -37], [0, 1, -55, -37], [0, 1, -55, -38], [0, 2, -55, -37], [0, 1, -56, -38], [0, 1, -56, -37], [0, 1, -55, -37], [0, 3, -56, -38], [0, 1, -57, -38], [0, 2, -57, -37], [0, 2, -56, -37], [0, 1, -56, -37], [0, 2, -56, -37], [0, 1, -54, -38], [0, 2, -56, -37], [0, 2, -55, -38], [0, 2, -56, -37], [0, 1, -56, -38], [0, 1, -55, -37], [0, 1, -56, -38], [0, 1, -55, -37]]]
                
    r.addTemplate("B", trainData[0])
    r.addTemplate("B", trainData[1])
    r.addTemplate("B", trainData[2])
    r.addTemplate("B", trainData[3])
    r.addTemplate("B", trainData[4])
    r.addTemplate("F", trainData[5])
    r.addTemplate("F", trainData[6])
    r.addTemplate("F", trainData[7])
    r.addTemplate("F", trainData[8])
    r.addTemplate("F", trainData[9])
    r.addTemplate("S", trainData[10])
    r.addTemplate("S", trainData[11])
    r.addTemplate("S", trainData[12])
    r.addTemplate("S", trainData[13])
    r.addTemplate("S", trainData[14])

    while 1:

        ccc = screen.getch()
        # send request for acceleration data
        ser.write(accDataRequest())
        accel = ser.read(7)

        if ord(accel[0]) != 0 and ord(accel[1]) != 0 and ord(accel[2]) != 0:
            x = struct.unpack('b', accel[0])
            y = struct.unpack('b', accel[1])
            z = struct.unpack('b', accel[2])


            if classifying == False:
                cprint("Next gesture captured will be ID " + str(gestureID),15,5)

            if classifying == True:
                cprint("We have entered classification mode.",15,5)
                cprint(" "*100,15,6)

                # store captured data to sqlite database that's previously been set up

            if capturing == True:

                cprint("Capturing gesture " + str(gestureID),15,5)
                # c = conn.cursor()
                # c.execute('''insert into acceldata values (?,?,?,?,?)''',[rightnow,gestureID,str(x),str(y),str(z)])
                # conn.commit()
                # c.close()

                # capture data for recognition later
                capData.append([0,int(x[0]),int(y[0]),int(z[0])])

            # print current values

            if classifying == False:
                cprint("Next gesture: " + gestureName + ", trace " + str(traceID),15,6)

            cprint("Current values:    " + str([x,y,z]),15,7)
            
            if realtime == True:
                buffer.insert(0,[0,int(x[0]),int(y[0]),int(z[0])])
                if len(buffer) > 80:
                    buffer.pop()
                    rr = r.recognize(buffer)
                    cprint(str(rr),0,4)
                    if len(rr) != 0:
                        if rr[0][0] < 50 and rr[0][2] < 45 and rr[0][1] != 'S':
                            cprint("OMG, it's a wild " + str(rr[0][1]),0,3)

        if ccc == ord('r') and realtime == False:
            realtime = True
            cprint("Realtime: " + str(realtime) + " Classifying: " + str(classifying) + " Testing: " + str(testing),5,2)
            
        elif ccc == ord('r') and realtime == True:
            realtime = False
            cprint("Realtime: " + str(realtime) + " Classifying: " + str(classifying) + " Testing: " + str(testing),5,2)

        if ccc == ord('g') and capturing == False and classifying == False:
            screen.nodelay(0)
            curses.echo()
            cprint("Please input next gesture ID to be captured: ",5,9)
            screen.addstr(9,55, " "*3, curses.A_UNDERLINE)
            nextGesture = screen.getstr(9,55)
            curses.noecho()
            screen.nodelay(1)
            cprint(" "*100,5,9)
            if is_number(nextGesture):
                gestureID = int(nextGesture)
                gestureName = gestureList[gestureID]
                cprint("Idling. Next gesture captured will be ID " + str(gestureID),15,5)
                cprint("Next gesture: " + gestureName + ", trace " + str(traceID),15,6)

        if ccc == ord('n') and capturing == False and classifying == False:
            screen.nodelay(0)
            curses.echo()
            cprint("Please input next gesture's name: ",5,9)
            screen.addstr(9,55, " "*10, curses.A_UNDERLINE)
            gestureName = screen.getstr(9,55)
            curses.noecho()
            screen.nodelay(1)
            cprint("                                                       ",5,9)

        if ccc == ord('c') and capturing == False and classifying == False:
            classifying = True
            cprint("Classify Mode: " + str(classifying) + " Testing mode: " + str(testing),5,2)

        elif ccc == ord('c') and capturing == False and classifying == True:
            classifying = False
            cprint("Classify Mode: " + str(classifying) + " Testing mode: " + str(testing),5,2)

        if ccc == ord('t') and capturing == False and testing == True:
            testing = False
            cprint("Classify Mode: " + str(classifying) + " Testing mode: " + str(testing),5,2)

        elif ccc == ord('t') and capturing == False and testing == False:
            testing = True
            classifying = False
            gestureID = 0
            traceID = 0
            score = 0
            total = 0
            badClass = []
            gestureName = gestureList[gestureID]
            cprint("Classify Mode: " + str(classifying) + " Testing mode: " + str(testing),5,2)

        if ccc == ord('b') and capturing == False:
            capturing = True

        if ccc == ord('s') and capturing == True:
            traceID += 1
            capturing = False
            cprint("Idling. Next gesture captured will be " + str(gestureID),15,5)

            c = conn.cursor()
            c.execute('''insert into capData values (?,?,?)''',[(gestureID-1),traceID,str(capData)])
            conn.commit()
            c.close()

            # do classification
            cresult = r.recognize(capData)

            if len(cresult) != 0:
                screen.addstr(15,0," "*100)
                screen.addstr(16,0," "*100)
                screen.addstr(17,0," "*100)
                screen.addstr(18,0," "*100)
                cprint("Classification Result: " + str(cresult),15,15)
                bestCount = 0
                for item in cresult:
                    if sum(1 for itemm in cresult if itemm[1] == item[1]) > bestCount:
                        bestResult = item[1]
                        bestCount = sum(1 for itemm in cresult if itemm[1] == item[1])
                        bestRotation = item[2]

                cprint("Final answer: " + str(bestResult) + " " + str(bestCount) + " result(s)",15,20)
                

            # add as a trace
            if testing == False and classifying == False:
                r.addTemplate(gestureName,capData)

            capData = []

            if testing == True:
                if  gestureName in bestResult:
                    score += 1.0
                else:
                    # badClass.append("gID: " + str(gestureID) + " tID: " + str(traceID) +  " gName: " + gestureName)
                    badClass.append(gestureName)
                total += 1.0
                cprint(str(score) + "/" + str(total) + ", " + str(score/total*100) + "% accuracy",15,11)
                cprint("Bad Classifications: " + str(badClass),5,20)

        elif ccc == ord('s') and capturing == True and classifying == True:
            cresult = r.recognize(capData)
            cprint("Classification Result: " + str(cresult),20,9)
            capData = []

        # check to see if we're done with this gesture yet
        if (traceID == traces):
        # move onto the next gesture
            traceID = 0
            gestureID += 1
            # check to see if we're done capturing
            if (gestureID + 1) > len(gestureList):
                classifying = True
                cprint("Classify Mode: " + str(classifying),5,2)
            else:
                gestureName = gestureList[gestureID]

        elif ccc == ord('q'):
            ser.close()
            sys.exit(0)

if __name__ == "__main__":
    curses.wrapper(main)
